type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BranchContentMinted @entity(immutable: true) {
  id: Bytes!
  rootTokenId: BigInt! # uint256
  tokenId: BigInt! # uint256
  ipId: Bytes! # address
  creator: Bytes! # address
  branchContentLocation_chainId: BigInt! # uint256
  branchContentLocation_directory: Bytes! # address
  branchContentLocation_index: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RootContentMinted @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  ipId: Bytes! # address
  creator: Bytes! # address
  rootContentLocation_directory: Bytes! # address
  rootContentLocation_name: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type branchMinterL1Set @entity(immutable: true) {
  id: Bytes!
  branchMinterL1: Bytes! # address
  status: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
